//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize, SimpleObject)]
#[sea_orm(table_name = "photos")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::flickr_photos::Entity")]
    FlickrPhotos,
    #[sea_orm(has_many = "super::photo_files::Entity")]
    PhotoFiles,
    #[sea_orm(has_many = "super::photo_reactions::Entity")]
    PhotoReactions,
    #[sea_orm(has_many = "super::photo_tags::Entity")]
    PhotoTags,
}

impl Related<super::flickr_photos::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlickrPhotos.def()
    }
}

impl Related<super::photo_files::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhotoFiles.def()
    }
}

impl Related<super::photo_reactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhotoReactions.def()
    }
}

impl Related<super::photo_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhotoTags.def()
    }
}

impl Related<super::directories::Entity> for Entity {
    fn to() -> RelationDef {
        super::photo_files::Relation::Directories.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::photo_files::Relation::Photos.def().rev())
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::photo_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::photo_tags::Relation::Photos.def().rev())
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::photo_reactions::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::photo_reactions::Relation::Photos.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
