//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize, SimpleObject)]
#[sea_orm(table_name = "flickr_photosets")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub flickr_id: u64,
    pub user_id: u64,
    pub title: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::flickr_photoset_tags::Entity")]
    FlickrPhotosetTags,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::flickr_photoset_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlickrPhotosetTags.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::flickr_photoset_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::flickr_photoset_tags::Relation::FlickrPhotosets
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
