//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize, SimpleObject)]
#[sea_orm(table_name = "directories")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    pub parent_id: Option<u64>,
    pub name: String,
    pub path: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::photo_files::Entity")]
    PhotoFiles,
}

impl Related<super::photo_files::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhotoFiles.def()
    }
}

impl Related<super::photos::Entity> for Entity {
    fn to() -> RelationDef {
        super::photo_files::Relation::Photos.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::photo_files::Relation::Directories.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
