//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use super::sea_orm_active_enums::TagType;
use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize, SimpleObject)]
#[sea_orm(table_name = "tags")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    #[sea_orm(unique)]
    pub name: String,
    pub description: String,
    pub note: String,
    pub tag_type: TagType,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::flickr_photoset_tags::Entity")]
    FlickrPhotosetTags,
    #[sea_orm(has_many = "super::photo_tags::Entity")]
    PhotoTags,
}

impl Related<super::flickr_photoset_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlickrPhotosetTags.def()
    }
}

impl Related<super::photo_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhotoTags.def()
    }
}

impl Related<super::flickr_photosets::Entity> for Entity {
    fn to() -> RelationDef {
        super::flickr_photoset_tags::Relation::FlickrPhotosets.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::flickr_photoset_tags::Relation::Tags.def().rev())
    }
}

impl Related<super::photos::Entity> for Entity {
    fn to() -> RelationDef {
        super::photo_tags::Relation::Photos.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::photo_tags::Relation::Tags.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
